			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Krapi Vani krapivan@buffalo.edu
Vickykumar Patel vickykum@buffalo.edu
Yogeros Smith yogeross@buffalo.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

   static struct list ready_list;
   To keep track of all the threads that are ready to run.

   static struct list sleep_list;
   List of all threads that are waiting, they are in first-in first-out order(FIFO).
	

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
   
   timer_sleep() checks how many ticks(time) are left for a thread to finish processing (using the resources). If the thread has 
   zero or less than zero ticks left, it means the thread has completed it process and is finished.If a thread has more than zero 
   ticks left then time_sleep() will add the thread to end of sleep_list and will call thread_block() on the thread so the thread 
   will stop using resources and go to sleep. timer_interrupt which will wake-up a thread based on wake-up time and current ticks 
   and add it to ready_list.
   

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

   To minimize the amount of time spent we wake up the thread when wake-up time is equal to current ticks.

   

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
   
    We use semaphores to avoid situations like this. When a thread calls timer_sleep(), before accessing sleep_list we use semaphore.
   

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

   We will use semaphore for sleep_list so that both time interrupt and timer_sleep cannot access it at same time.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

   This design handles race conditions and uses syncronisation instead of turning interrupts off. It schedules threads in sleep list
   and wakes them up when required.This desing avoids busy waiting.

   

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

   static struct list ready_list;
   To keep track of all the threads that are ready to run.

   static struct list sleep_list;
   List of all threads that are waiting.

   static struct list donation_list;
   To keep track of how priority donation.
   

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)



---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

   We will keep our list ordered with priority and so when thread wakes up from top it has highest priority.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

   When a lock causes priority donation the thread1 with High priority waiting for thread2 with lower priority donate its priority to
   thread2 to boost it up so now thread2 will run and once it finishes thread1 can run as it was waiting on thread2 to complete.We use
   list to keep track of how priorities are donated.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
   
   When a higher-priority thread is waiting we use priority donation to run the thread waiting for so higher-priority thread can wait.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

   

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
